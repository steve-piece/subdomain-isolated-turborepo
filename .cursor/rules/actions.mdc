---
globs: actions.ts,route.ts
alwaysApply: false
---

# Server Actions and DB Access Rules

## Required Patterns

- Start files with `"use server"` for Next.js Server Actions.
- Import the server client from `@/lib/supabase/server`.
- Validate inputs with `zod` for non-trivial payloads.
- Return typed results `{ success: boolean; message?: string; ... }`.

## Authentication and Tenant Checks

- Use `const { data: claims } = await supabase.auth.getClaims()`.
- If no claims or error â†’ return/redirect to clean `/auth/login`.
- For tenant-bound actions, require a `subdomain` param and assert:
  - `claims.claims.subdomain === subdomain`
- Validate `subdomain` with `isValidSubdomain()` from `@workspace/ui/lib/subdomains` before use.

## Data Access

- Default to RLS-protected tables and views. Do not disable RLS.
- For unauthenticated lookups, use views like `tenants_public` (no sensitive fields).
- Never select sensitive columns unnecessarily; select minimal fields.

## Admin Operations (Service Role)

- Only execute admin APIs (e.g., `supabase.auth.admin.*`) from server-code that uses a dedicated service-role client.
- Create a separate server-only util (e.g., `lib/supabase/service.ts`) to instantiate with `SUPABASE_SERVICE_ROLE_KEY` and `server-only` imports.
- Do not import or reference service role in client-side code or shared UI packages.

## Error Handling

- Normalize errors to a friendly `message` and do not leak raw PostgREST or stack traces.
- Log server errors with context (feature and action), avoid `console.log` in hot paths.

## Redirects

- Always redirect with clean URLs (e.g., `/dashboard`, `/auth/login`).
- Never redirect to `/s/${subdomain}/*` from actions; middleware handles translation.

## Example Skeleton

```ts
"use server";
import { createClient } from "@/lib/supabase/server";
import { isValidSubdomain } from "@workspace/ui/lib/subdomains";

export async function doThing(input: { subdomain: string; ... }) {
  if (!isValidSubdomain(input.subdomain)) {
    return { success: false, message: "Invalid subdomain" };
  }

  const supabase = await createClient();
  const { data: claims, error } = await supabase.auth.getClaims();
  if (error || !claims) return { success: false, message: "Authentication required" };
  if (claims.claims.subdomain !== input.subdomain) {
    return { success: false, message: "Unauthorized: Invalid tenant" };
  }

  // ... perform RLS-safe operations ...

  return { success: true };
}
```
